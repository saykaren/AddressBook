{"version":3,"sources":["components/utils/fetchUserData.js","components/app/Card.tsx","components/app/App.tsx","serviceWorker.js","index.js"],"names":["fetchData","a","async","setUserData","setLoading","setError","fetch","json","then","res","catch","err","Card","data","setModal","modal","setMemberData","className","map","userInfo","key","id","name","onClick","activeUserID","active","dataID","App","useState","userData","error","loading","memberData","useEffect","email","phone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAAO,SAAeA,EAAf,sBAAAC,EAAAC,OAAA,uDAA2BC,EAA3B,EAA2BA,YAAaC,EAAxC,EAAwCA,WAAYC,EAApD,EAAoDA,SAApD,WAAAJ,EAAA,MACaK,MAAM,8CADnB,cAGFC,OACAC,MAAK,SAACC,GAAD,OAASN,EAAYM,MAC1BD,KAAKJ,GAAW,IAChBM,OAAM,SAACC,GAAD,OAASN,EAASM,MANtB,qCAQQX,I,OCwCAY,G,MA5BF,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,cAUrC,OACE,6BAASC,UAAU,gBAChBJ,GACCA,EAAKK,KAAI,SAACC,GAAD,OACP,wBAAIC,IAAKD,EAASE,GAAIJ,UAAU,mBAC9B,wBAAIA,UAAU,qBACZ,6CACA,yBAAKA,UAAU,iBAAiBE,EAASG,OAE3C,4BAAQC,QAAS,kBAlBNC,EAkBwBL,EAASE,GAjBpDP,EAAS,eAAKC,EAAN,CAAaU,QAAQ,EAAMC,OAAQF,UAC3CX,EAAKK,KAAI,SAACC,GACJA,EAASE,KAAOG,GAClBR,EAAcG,MAJA,IAACK,IAkBX,2BCuBGG,EArDH,WAAO,IAAD,EACgBC,mBAA8B,IAD9C,mBACTC,EADS,KACC1B,EADD,OAEUyB,oBAAS,GAFnB,mBAETE,EAFS,KAEFzB,EAFE,OAGcuB,oBAAS,GAHvB,mBAGTG,EAHS,KAGA3B,EAHA,OAIoBwB,qBAJpB,mBAITI,EAJS,KAIGhB,EAJH,OAKUY,mBAAS,CAAEH,QAAQ,EAAOC,OAAQ,IAL5C,mBAKTX,EALS,KAKFD,EALE,KAYhB,OALAmB,qBAAU,WACR7B,GAAW,GACXJ,EAAU,CAAEG,cAAaC,aAAYC,eACpC,IAGD,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAEDa,EAAQ,6BAAMA,GAAe,qCAC7BC,EACC,qDAEA,8BACE,kBAAC,EAAD,CACElB,KAAMgB,EACNf,SAAUA,EACVC,MAAOA,EACPC,cAAeA,IAEhBD,EAAMU,QAAUO,GACf,yBAAKf,UAAU,SACb,wBAAIA,UAAU,gBACXe,EAAWV,MAAQ,sCAAYU,EAAWV,MAC3C,4BACEL,UAAU,cACVM,QAAS,kBAAMT,EAAS,CAAEW,QAAQ,EAAOC,OAAQ,MAFnD,MAOF,yBAAKT,UAAU,iBACb,4BACE,wBAAIA,UAAU,iBAAd,UAAsCe,EAAWE,OACjD,wBAAIjB,UAAU,iBAAd,UAAsCe,EAAWG,aCvC/CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.51002642.chunk.js","sourcesContent":["export async function fetchData({ setUserData, setLoading, setError }) {\n  const res = await fetch(`http://jsonplaceholder.typicode.com/users`);\n  res\n    .json()\n    .then((res) => setUserData(res))\n    .then(setLoading(false))\n    .catch((err) => setError(err));\n}\nexport default fetchData;\n","import React from 'react';\nimport './../styling/Card.scss';\nimport {\n  userJsonPlaceHolder,\n  dataProps,\n} from './../../interface/DataRecipient';\n\ninterface modalProps {\n  active: boolean;\n  dataID: number;\n}\n\ninterface CardProps {\n  data: userJsonPlaceHolder;\n  setModal: (arg2: modalProps) => void;\n  modal: modalProps;\n  doc?: any;\n  setMemberData: (arg1: dataProps) => void;\n}\n\nconst Card = ({ data, setModal, modal, setMemberData }: CardProps) => {\n  const handleClick = (activeUserID: number) => {\n    setModal({ ...modal, active: true, dataID: activeUserID });\n    data.map((userInfo) => {\n      if (userInfo.id === activeUserID) {\n        setMemberData(userInfo);\n      }\n    });\n  };\n\n  return (\n    <section className=\"card-section\">\n      {data &&\n        data.map((userInfo) => (\n          <ul key={userInfo.id} className=\"card-individual\">\n            <li className=\"card-name-details\">\n              <label>User Name:</label>\n              <div className=\"card-name-div\">{userInfo.name}</div>\n            </li>\n            <button onClick={() => handleClick(userInfo.id)}>\n              More Information\n            </button>\n          </ul>\n        ))}\n    </section>\n  );\n};\n\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport './../styling/App.scss';\nimport { fetchData } from './../utils/fetchUserData';\nimport Card from './Card';\nimport {\n  userJsonPlaceHolder,\n  dataProps,\n} from './../../interface/DataRecipient';\n\nconst App = () => {\n  const [userData, setUserData] = useState<userJsonPlaceHolder>([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [memberData, setMemberData] = useState<dataProps | undefined>();\n  const [modal, setModal] = useState({ active: false, dataID: 1 });\n\n  useEffect(() => {\n    setLoading(true);\n    fetchData({ setUserData, setLoading, setError });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <label>Address Book</label>\n      </header>\n      {error ? <div>{error}</div> : <></>}\n      {loading ? (\n        <div>Loading, Please wait</div>\n      ) : (\n        <main>\n          <Card\n            data={userData}\n            setModal={setModal}\n            modal={modal}\n            setMemberData={setMemberData}\n          />\n          {modal.active && memberData && (\n            <div className=\"modal\">\n              <h2 className=\"modal-header\">\n                {memberData.name && <div>Name: {memberData.name}</div>}\n                <button\n                  className=\"modal-close\"\n                  onClick={() => setModal({ active: false, dataID: 1 })}\n                >\n                  X\n                </button>\n              </h2>\n              <div className=\"modal-content\">\n                <ul>\n                  <li className=\"modal-details\">Email: {memberData.email}</li>\n                  <li className=\"modal-details\">Phone: {memberData.phone}</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </main>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}